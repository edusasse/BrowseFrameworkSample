#################
#     JDBC      #
#################
jdbc.url=jdbc\:mysql\://localhost/ai_sample
jdbc.driverClassName=com.mysql.jdbc.Driver
 
#################
#    HIBERNATE  #
#################
hibernate.dialect=org.hibernate.dialect.MySQLDialect
hibernate.show_sql=false
hibernate.format_sql=false
hibernate.connection.autocommit=false
hibernate.current_session_context_class=thread

#################
#     C3P0      #
#################
# TODO verificar criptografia para C3P0
c3p0.username=root
c3p0.password=<<password>>

# O número de milisegundos que um cliente chamando getConnection() irá esperar  
# por uma Conexão, via check-in ou uma nova conexão adquirida quando o pool estiver  
# esgotado. Zero siginifica esperar indefinidademento. Setar qualquer valor positivo  
# causará um time-out com uma SQLException depois de passada a quantidade especificada  
# de milisegundos.  
c3p0.timeout=0
# Número de conexõs que o pool tentará adiquirur durante a inicialização. Deve ser um número entre  minPoolSize e maxPoolSize.  
c3p0.initialPoolSize=5
# Número mínimo de conexões que o pool irá manter.  
c3p0.minPoolSize=1
# Número máximo de conexões que o pool irá manter.  
c3p0.maxPoolSize=10
# Segundos que uma Conexão será mantida no pool sem ser usada, antes de ser descartada. Zero significa que a conexão nunca expira.  
c3p0.maxIdleTime=120
# Determina quantas conexões por vez o c3p0 tenta adquirir quando o pool não tem  conexões inativas para serem usadas.  
c3p0.acquireIncrement=1
c3p0.preferredTestQuery=SELECT 1
# Se idleConnectionTestPeriod é um número maior que zero, c3p0 irá testar todas as conexões inativas, que estão no pool e não fizeram o check-out, de X em X  
# segundos, onde X é o valor de idleConnectionTestPeriod.
c3p0.idleConnectionTestPeriod=60
# O número de milisegundos que um cliente chamando getConnection() irá esperar  
# por uma Conexão, via check-in ou uma nova conexão adquirida quando o pool estiver  
# esgotado. Zero siginifica esperar indefinidademento. Setar qualquer valor positivo  
# causará um time-out com uma SQLException depois de passada a quantidade especificada  
# de milisegundos.
c3p0.checkoutTimeout=5000
# Tempo em milisegundos que o c3p0 irá esperar entre tentivas de aquisição.  
c3p0.acquireRetryDelay=1000
# Define quantas vezes o c3p0 tentará adquirir uma nova Conexão da base de dados  
# antes de desistir. Se esse valor é menor ou igual a zero, c3p0 tentará adquirir  
# uma nova conexão indefinidamente.  
c3p0.acquireRetryAttempts=5
# Se true, um pooled DataSource declarará a si mesmo quebrado e ficará permanentemente  
# fechado caso não se consiga uma Conexão do banco depois de tentar acquireRetryAttempts  
# vezes. Se falso, o fracasso para obter uma Conexão jogará uma exceção, porém  
# o DataSource permanecerá valido, e tentará adquirir novamente, seguindo uma nova  
# chamada para getConnection().  
c3p0.breakAfterAcquireFailure=false
# Número de segundos que conexões acima do limite minPoolSize deverão permanecer  
# inativas no pool antes de serem fechadas. Destinado para aplicações que desejam  
# reduzir agressivamente o número de conexões abertas, diminuindo o pool novamente  
# para minPoolSize, se, seguindo um pico, o nível de load diminui e Conexões não  
# são mais requeridas. Se maxIdleTime está definido, maxIdleTimeExcessConnections  
# deverá ser um valor menor para que o parâmetro tenho efeito. Zero significa que  
# não existirá nenhuma imposição, Conexões em excesso não serão mais fechadas.  
c3p0.maxIdleTimeExcessConnections=30
# c3p0 é muito assíncrono. Operações JDBC lentas geralmente são executadas por  
# helper threads que não detém travas de fechamento. Separar essas operações atravéz  
# de múltiplas threads pode melhorar significativamente a performace, permitindo  
# que várias operações sejam executadas ao mesmo tempo.  
c3p0.numHelperThreads=2
# O tamanho do cache do C3P0 para PreparedStatements. Se o valor de ambos, maxStatements  
# e maxStatementsPerConnection, é zero, o cache será desabilitado. Se  
# maxStatements é zero mas maxStatementsPerConnection é um valor diferente de  
# zero, o cache será habilitado, mas sem um limite global, apenas com um limite  
# por conexão. maxStatements controla o número total de Statements dos quais é  
# feito cache, para todas as conexões. Se setado, deve ser um valor relativamente  
# alto, já que cada Conexão do pool terá um determinado número de statements  
# colocado em cache. Como um exemplo, considere quantos PreparedStatements  
# distintos são frequentemente usados na sua aplicação e multiplique esse  
# número por maxPoolSize para chegar num valor apropriado. Apesar do parâmetro  
# maxStatements ser o padrão para o JDBC controlar o cache de statements, usuários  
# podem achar mais intuitivo o uso do parâmetro maxStatementsPerConnection.
c3p0.maxStatements=0
# O número de PreparedStatements que o c3p0 irá colocar em cache, para cada conexão  
# do pool. Se ambos maxStatements e maxStatementsPerConnection são zero, o cache  
# de consultas ficará inativo. Se maxStatementsPerConnection é zero, mas maxStatements  
# é um valor não nulo, o cache de consultas será habilitado, e um limite global  
# imposto, mas por outro lado, não existirá nenhum limite individual por conexão.  
# Se setado, maxStatementsPerConnection deveria ser um valor, aproximado, do número  
# de PreparedStatements, distintos, que são frequentemente usados na sua aplicação  
# mais dois ou três, para que as consultas menos comuns não tirem as mais comuns  
# do cache. Apesar de maxStatements ser o parâmetro padrão em JDBC para controlar  
# o cache de consultas, o usuário pode achar mais intuitivo usar o parâmetro  
# maxStatementsPerConnection.  
c3p0.maxStatementsPerConnection=10